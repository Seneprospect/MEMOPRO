{"ast":null,"code":"var _jsxFileName = \"C:\\\\divmelodies\\\\src\\\\components\\\\EpisodeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EpisodeList({\n  podcasts\n}) {\n  _s();\n  const {\n    podcastId\n  } = useParams();\n  const selectedPodcast = podcasts.find(podcast => podcast.id === parseInt(podcastId, 10));\n\n  // Utilisez le hook d'état directement, sans condition\n  const [isPlaying, setIsPlaying] = useState({});\n  if (!selectedPodcast) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Podcast non trouv\\xE9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Gestionnaire d'événements pour basculer l'état de lecture\n  const togglePlay = episodeId => {\n    setIsPlaying(prevIsPlaying => ({\n      ...prevIsPlaying,\n      [episodeId]: !prevIsPlaying[episodeId]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Liste des \\xC9pisodes pour le Podcast \", selectedPodcast.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: selectedPodcast.episodes.map(episode => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: episode.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: episode.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            children: [episode.audioSrc, /*#__PURE__*/_jsxDEV(\"source\", {\n              src: '${window.location.origin}/$episode.audioSrc',\n              type: \"audio/mp3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), \"Votre navigateur ne supporte pas l'audio HTML5.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => togglePlay(episode.id),\n            children: isPlaying[episode.id] ? 'Pause' : 'Play'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, episode.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(EpisodeList, \"avPc8O1S7rJ4ib+J3gTLE3row68=\", false, function () {\n  return [useParams];\n});\n_c = EpisodeList;\nexport default EpisodeList;\nvar _c;\n$RefreshReg$(_c, \"EpisodeList\");","map":{"version":3,"names":["React","useState","useParams","jsxDEV","_jsxDEV","EpisodeList","podcasts","_s","podcastId","selectedPodcast","find","podcast","id","parseInt","isPlaying","setIsPlaying","children","fileName","_jsxFileName","lineNumber","columnNumber","togglePlay","episodeId","prevIsPlaying","title","episodes","map","episode","description","controls","audioSrc","src","type","onClick","_c","$RefreshReg$"],"sources":["C:/divmelodies/src/components/EpisodeList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction EpisodeList({ podcasts }) {\r\n  const { podcastId } = useParams();\r\n  const selectedPodcast = podcasts.find((podcast) => podcast.id === parseInt(podcastId, 10));\r\n\r\n  // Utilisez le hook d'état directement, sans condition\r\n  const [isPlaying, setIsPlaying] = useState({});\r\n\r\n  if (!selectedPodcast) {\r\n    return <div>Podcast non trouvé</div>;\r\n  }\r\n\r\n  // Gestionnaire d'événements pour basculer l'état de lecture\r\n  const togglePlay = (episodeId) => {\r\n    setIsPlaying((prevIsPlaying) => ({\r\n      ...prevIsPlaying,\r\n      [episodeId]: !prevIsPlaying[episodeId],\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Liste des Épisodes pour le Podcast {selectedPodcast.title}</h2>\r\n      <ul>\r\n        {selectedPodcast.episodes.map((episode) => (\r\n          <li key={episode.id}>\r\n            <h3>{episode.title}</h3>\r\n            <p>{episode.description}</p>\r\n            <div>\r\n              <audio controls>\r\n                {episode.audioSrc}\r\n                <source src={'${window.location.origin}/$episode.audioSrc'} type=\"audio/mp3\" />\r\n                Votre navigateur ne supporte pas l'audio HTML5.\r\n              </audio>\r\n              <button onClick={() => togglePlay(episode.id)}>\r\n                {isPlaying[episode.id] ? 'Pause' : 'Play'}\r\n              </button>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EpisodeList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}